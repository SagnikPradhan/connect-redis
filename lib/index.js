"use strict";const isNodeRedis=client=>"SCAN"in client;function attach(callback){return promise=>{promise.then(value=>callback(undefined,value)).catch(error=>callback(error))}}function connectRedis({Store}){return class RedisStore extends Store{prefix;client;serializer;disableTTL;ttl;disableTouch;constructor({options,client,prefix,serializer,disableTTL,ttl,disableTouch}){super(options);this.client=client;this.prefix=prefix||"sess:";this.serializer=serializer||JSON;this.disableTTL=disableTTL||false;this.ttl=ttl||24*60*60;this.disableTouch=disableTouch||false}get(sid,callback){const main=async()=>{const key=`${this.prefix}${sid}`;const value=await this.client.get(key);if(!value)return null;return this.serializer.parse(value)};attach(callback)(main())}set(sid,session,callback){const main=async()=>{const key=`${this.prefix}${sid}`;const value=this.serializer.stringify(session);const ttl=this.__getTTL(session);if(ttl<0&&!this.disableTTL)return await this.client.del(key);if(this.disableTTL)this.client.set(key,value);else if(isNodeRedis(this.client))await this.client.set(key,value,{EX:ttl});else await this.client.set(key,value,"EX",ttl)};attach(callback)(main().then(()=>undefined))}destroy(sid,callback){const key=`${this.prefix}${sid}`;attach(callback)(this.client.del(key).then(()=>undefined))}touch(sid,session,callback){const main=async()=>{if(this.disableTouch||this.disableTouch)return undefined;const key=`${this.prefix}${sid}`;await this.client.expire(key,this.__getTTL(session))};attach(callback)(main())}clear(callback){attach(callback)(this.__getAllKeys().then(keys=>void this.client.del(keys)))}length(callback){attach(callback)(this.__getAllKeys().then(value=>value.length))}ids(callback){attach(callback)(this.__getAllKeys().then(keys=>keys.map(k=>k.slice(this.prefix.length))))}all(callback){const main=async()=>{const keys=await this.__getAllKeys();const values=isNodeRedis(this.client)?await this.client.mGet(keys):await this.client.mget(keys);return Object.fromEntries(keys.map((key,idx)=>{const value=values[idx];if(value)return[key.slice(this.prefix.length),this.serializer.parse(value),];else return null}).filter(value=>Boolean(value)))};attach(callback)(main())}__getTTL(session){var ref;return(session===null||session===void 0?void 0:(ref=session.cookie)===null||ref===void 0?void 0:ref.expires)?Math.ceil((Number(session.cookie.expires)-Date.now())/1e3):this.ttl}async __getAllKeys(){const pattern=`${this.prefix}*`;return this.__scanKeys(0,pattern,100)}async __scanKeys(cursor1,pattern,count){const{cursor:nextCursor,keys:keys1}=await (isNodeRedis(this.client)?this.client.scan(cursor1,{COUNT:count,MATCH:pattern}):this.client.scan(cursor1,"MATCH",pattern,"COUNT",count).then(([cursor,keys])=>({cursor:Number(cursor),keys})));return[...keys1,...nextCursor!==0?await this.__scanKeys(nextCursor,pattern,count):[],]}}}module.exports=connectRedis
